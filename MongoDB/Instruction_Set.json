{   
    "Dollar Sets" : [{"$lt" : "less than"},{"$lte" : "less than equal"},{"$gt" : "greater than"},{"$gte" : "greater than equal"},{"$inc" : "Update 기능 수행시 증가량 설정"} , {"$or" : [{"field" : "value"},{"field" : "value"}]} , {"$all" : "순서에 관계없는 모든"}],

    "use <database>" : "사용할 데이터베이스를 선택함과 동시에 클러스터에 데이터베이스 이름이 존재하지 않는다면 데이터 베이스를 생성합니다.",
    "db.dropDatabase()" : "사용중인 데이터베이스를 드랍시킵니다.",

    "db.createCollection()" : "사용중인 데이터베이스에 대한 컬렉션을 생성합니다 인자는 String 형태",

    "db.getCollectionInfos()" : "사용중인 데이터베이스에 존재하는 컬렉션들의 정보를 생성합니다",

    "db.getCollectionNames()" : "사용중인 데이터베이스에 존재하는 컬렉션들의 이름을 나타냅니다. == show collections",

    "db.createCollection('log', { capped : true, size : 5242880, max : 5000 } )" : "컬렉션에 옵션을 줍니다. capped를 true로 주고 컬렉션의 최대 용량을 지정하여 줍니다(byte) 또한 max옵션으로 컬렉션 내에 존재할 수 있는 최대 다큐먼트의 개수도 제한할 수 있습니다.",

    "db.collection.insertOne({})":"컬렉션에 대해 하나의 JSON 다큐먼트를 INSERT 합니다",

    "db.collection.insertMany([{}])" : "컬렉션에 대해 다수의 JSON 다큐먼트를 INSERT 합니다",

    "db.collection.find() or find({})" : "컬렉션에 존재하는 모든 다큐먼트를 가져옵니다. 옵션 없이 수행 할 경우 Stack형태로 자료를 가져옴.",
     
    "db.collection.find().sort({'$natural' : -1})" : "컬렉션에 존재하는 모든 다큐먼트를 삽입된 순서의 역순으로 가져옵니다. (Queue)",

    "db.collection.find({'status' : 'D'})" : "컬렉션에서 키 'status' 의 값이 'D'인 다큐먼트를 가져옵니다.",

    "db.collection.find({'size' : {'h' : 14, 'w' : 21 , 'uom' : 'cm'})" : "컬렉션에서 키 'size' 의 값이 다큐먼트이고 그 내부 다큐먼트의 키 'h' 의 값이 14 AND 키 'w'의 값이 21 AND 키 'uom'의 값이 'cm'인 문서를 가져옵니다.",

    "db.inventory.find( { 'size.uom': 'in' } )" : "컬렉션에서 다큐먼트의 size 키에 접근하고 그 값이 다큐먼트라면 Dot표시를 통해 다시 값 다큐먼트의 키 값에 접근 할 수 있습니다.",

    "db.inventory.find({tags : 'red'})" : "컬렉션에서 tags 키가 배열을 값으로 가지고 있을 때 배열의 원소중 'red' 가 존재하는 모든 다큐먼트를 가져옵니다.",

    "db.inventory.find( { tags: ['red', 'blank'] } )" : "컬렉션에서 배열을 값으로 가지고 있는 키를 검색하여 그 배열의 값이 정확히 ['red', 'blank'] 인 문서만을 가져옵니다.",

    "db.collection.find().pretty()" : "컬렉션 내용을 계층구조로 이쁘게 나타냅니다 ㅎㅎ",

    "db.collection.find({<field> : {'$ln' : [<value>]})" : "컬렉션에서 해당 필드를 조사하여 배열안에 존재하는 원소들중 하나라도 존재하고 매치되는 다큐먼트를 가져옵니다.",

    "db.collection.find({'status' : 'A' , 'qty' : {'$lt' : 30}})" : "SELECT * FROM collection WHERE status = A and qty < 30",

    "db.collection.find({'$or' : [ {'status' : 'A'} , {'qty' < 30} ])" : "SELECT * FROM collection WHERE status = A or qty < 30",

    "db.collection.find('name' : /<REGULAR EXPRESSION>/)" : "컬렉션의 필드를 조사하여 정규표현식을 만족하는 다큐먼트를 가져옵니다.",

    "db.collection.find({ array : ['a' , 'b']})" : "컬렉션의 배열 필드를 조사하여 정확히 a,b순서로 존재하는 배열이 있는 다큐먼트를 가져옵니다.",

    "db.collection.find({ array :{'$all' : ['a' , 'b'] } })" : "컬렉션의 배열 필드를 조사하여 a,b가 존재하는 배열이 있는 다큐먼트를 가져옵니다.",

    "db.collection.find({ array : {'$gt' : 25})" : "컬렉션의 배열 필드를 조사하여 원소중 25보다 큰 값이 있는 배열이 있는 다큐먼트를 가져옵니다.",

    "db.collection.find({ array : {'$gt' : 25 , '$lt' : 40})" : "컬렉션의 배열 필드를 조사하여 원소중 25보다 크고 40보다 작은 값이 있는 배열이 있는 다큐먼트를 가져옵니다.",

    "db.collection.find({ array.index : {'$gt' : 25})" : "컬렉션의 배열의 n번째 인덱스를 조사하여 25보다 크다면 해당 다큐먼트를 가져옵니다.",

    "db.collection.find({arrayfield : {'$size' : 3})" : "컬렉션의 배열 필드의 길이가 3인 다큐먼트를 가져옵니다.",

    "db.collection.find().limit(number)" : "컬렉션의 다큐먼트를 number개만큼 가져옵니다.",

    "db.collection.find({'status' : 'A'},{'field1' : 1 , 'field2' : 1})" : "컬렉션에서 status가 A인 다큐먼트에서 status , field1 , field2 필드를 가져옵니다.",

    






}

